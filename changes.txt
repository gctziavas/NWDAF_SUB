-----11/6/23-----
fixed swagger UI
made test project for generating every class -> it uses spring boot 2
todo:
	-fix data types (Accuracy,...) DONE
	-make swagger post request generate OffsetDateTime.now() DONE
	-add request builder with parameters (construct the body from these parameters) by making a Client DONE
	-make html form for client INPROGRESS (ClientHomeController , ClientConfig)
	-fix api annotations for swagger ui (+transfersapi)
	-controller if statements for building the response INPROGRESS (responsebuilder: same datatype as request but with added fields)
	- Location Header = uri of created subscription DONE (need to test it with jpa)
	- notifURI = client address DONE (in env variables like with apiRoot)
	-add database DONE
	-make schema for database DONE (with jsonb)
	-query filters for subs
	-make some fake test data (for example for NFLoad) DONE
	-massage the test data INPROGRESS (make classes for it and for prometheus request)
	-save massaged Prometheus data (NwdaNotification model) to a second DB(Influx or Postgres) INPROGRESS (error with inserting)
	-graphana the data DONE (Could graphana the massaged data as well)
	-implement periodic notifications (sends post to client with notifURI after making the notifications from Prometheus data)
	-simple api for client receiving notifications (just a controller mapping for notifications + display below the form) DONE
	-do the NF_LOAD test (maybe add an nf simulated container)
	-make 2 client dbs (one for sub responses and one for notifications) same as server

	-update and delete subs
	-add another postgres db for grouping the data based on time windows of 1hour
	-implement immediate reporting & time_offset (notify about grouped data)
	-implement with real consumer nfs using the client already made (nrf for nf load)  OR add in seperate containers: client db to store api responses + client logic for subscribing and context transfers
	-get real data and graphana it
	-do another use case (UE_Mobility)
	
	OPTIONAL:
	-implement transfer (use 29552-h40.pdf 5.4 )
	-find an mltf use case and implement it with the given data (for example predict nfload going over 0.9) 
	-look at data collection architecture and implement one on the network (kafka broker)
	-complete other use cases and consumer connections
	-implement mlmodel api for mtlf/anlf seperation
	-implement data management api
	-solve ml model storage problem
	-implement complete test case for multiple nwdafs (with/without mtlf)
	-Anlf SDK
-----19/6/23-----
fixed up to NwdafEvent
-----20/6/23-----
fixed datatypes
-----23/6/23-----
fixed OffsetDateTime
fixed byte[] with @Schema
request is working
removed type annotations in oneof interfaces
-----27/6/23-----
test run for NF_LOAD
ClientApp for NF_LOAD + database from container (error with nnwdaf_sub as property of event_sub)
-----28/6/23-----
Realised i have to change repository from jdbc to jpa and create a class for the table (will use jsonb)
request builder almost done , only EventSubscription attributes left
form will use simple String types and not the full object
----3/7/23-------
Finished request builder
Changed to jpa
Fixed http entity not giving headers and body back to client -> changed to response entity type
Started making form
----7/7/23-------
Build form up to basic NF_LOAD test
Launched Prometheus metrics containers that get metrics from other containers (postman post requests)
----11/7/23------
Connected to Prometheus and made post request for cpu metrics from any container by specifying its name (promql_client project)
Then did a test by sending a NwdaNotification object to the client every 1 second after pulling the new cpu load
Connected 2nd postgres database for storing notifications (uses the same server)
Implemented controller response for notifMethod and repPeriod
ERROR with storing notif !!